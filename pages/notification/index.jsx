import { SearchIcon } from '@chakra-ui/icons'
import {
  Flex,
  Input,
  InputGroup,
  InputLeftElement,
  Text,
} from '@chakra-ui/react'
import { useRouter } from 'next/router'
import React, { useRef, useState } from 'react'
import TabItem from '../../components/atoms/TabItem'
import TabItems from '../../components/molecules/TabItems'

const taskList = [
  {
    id: 1,
    content: 'ÊäïÁ•®ÊúüÈñì„Åå„Çπ„Çø„Éº„Éà„Åó„Åæ„Åó„Åü„ÄÇÊäïÁ•®„Çí„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
    title: 'Á≠ã„Éà„É¨„ÅåÊ•Ω„Åó„Åè„Å™„Å£„Å¶„ÇÇ„Çä„ÇÇ„ÇäÁ≠ãËÇâ„Åå„Å§„Åè„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥',
    createdAt: '2023/01/01 11:00',
    status: 'vote',
    projectId: '1',
  },
  {
    id: 2,
    content: 'ÊäïÁ•®ÊúüÈñì„Åå„Çπ„Çø„Éº„Éà„Åó„Åæ„Åó„Åü„ÄÇÊäïÁ•®„Çí„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
    title: 'Á≠ã„Éà„É¨„ÅåÊ•Ω„Åó„Åè„Å™„Å£„Å¶„ÇÇ„Çä„ÇÇ„ÇäÁ≠ãËÇâ„Åå„Å§„Åè„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥',
    createdAt: '2023/01/01 11:00',
    status: 'vote',
    projectId: '2',
  },
  {
    id: 3,
    content: 'Âà∂‰ΩúÊúüÈñì„Åå„Çπ„Çø„Éº„Éà„Åó„Åæ„Åó„Åü„ÄÇ‰ΩúÂìÅ„ÇíÊèêÂá∫„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
    title: 'Á≠ã„Éà„É¨„ÅåÊ•Ω„Åó„Åè„Å™„Å£„Å¶„ÇÇ„Çä„ÇÇ„ÇäÁ≠ãËÇâ„Åå„Å§„Åè„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥',
    createdAt: '2023/01/01 11:00',
    status: 'production',
    projectId: '3',
  },
  {
    id: 4,
    content: '„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅåÁµÇ‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇÁµêÊûú„ÇíÁ¢∫Ë™ç„Åó„Åæ„Åó„Çá„ÅÜ„ÄÇ',
    title: 'Á≠ã„Éà„É¨„ÅåÊ•Ω„Åó„Åè„Å™„Å£„Å¶„ÇÇ„Çä„ÇÇ„ÇäÁ≠ãËÇâ„Åå„Å§„Åè„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥',
    status: 'done',
    createdAt: '2023/01/01 11:00',
    projectId: '4',
  },
  {
    id: 5,
    content: '„Éü„ÉÉ„Ç∑„Éß„É≥„Ç≥„É≥„Éó„É™„Éº„Éàüåü',
    createdAt: '2023/01/01 11:00',
  },
]

const notificationList = [
  {
    id: 1,
    content: '„ÅäÁü•„Çâ„Åõ„Åß„Åô„ÄÅ„Éü„ÉÉ„Ç∑„Éß„É≥„Ç≥„É≥„Éó„É™„Éº„Éàüåü',
    createdAt: '2023/01/01 11:00',
  },
  {
    id: 2,
    content: '„ÅäÁü•„Çâ„Åõ„Åß„Åô„ÄÅ„Éü„ÉÉ„Ç∑„Éß„É≥„Ç≥„É≥„Éó„É™„Éº„Éàüåü',
    createdAt: '2023/01/01 11:00',
  },
  {
    id: 3,
    content: '„ÅäÁü•„Çâ„Åõ„Åß„Åô„ÄÅ„Éü„ÉÉ„Ç∑„Éß„É≥„Ç≥„É≥„Éó„É™„Éº„Éàüåü',
    createdAt: '2023/01/01 11:00',
  },
  {
    id: 4,
    content: '„ÅäÁü•„Çâ„Åõ„Åß„Åô„ÄÅ„Éü„ÉÉ„Ç∑„Éß„É≥„Ç≥„É≥„Éó„É™„Éº„Éàüåü',
    createdAt: '2023/01/01 11:00',
  },
]

const Notification = () => {
  const router = useRouter()
  const [notificationIndex, setNotificationIndex] = useState(0)
  const toggleNotification = (index) => {
    setNotificationIndex(index)
  }
  const linkText = (status) => {
    if (status === 'production') {
      return 'ÊèêÂá∫„Åô„Çã'
    } else if (status === 'vote') {
      return 'ÊäïÁ•®„Åô„Çã'
    } else if (status === 'done') {
      return 'ÁµêÊûú„ÇíË¶ã„Çã'
    }
  }
  return (
    <Flex direction='column' py='56px'>
      <Text color='blue.800' fontWeight='bold' fontSize='22px' mb='16px'>
        „Çø„Çπ„ÇØ„Éª„ÅäÁü•„Çâ„Åõ‰∏ÄË¶ß
      </Text>
      <InputGroup color='black' bg='white' colorScheme='gray' mb='16px'>
        <InputLeftElement
          pointerEvents='none'
          // eslint-disable-next-line react/no-children-prop
          children={<SearchIcon color='gray.300' />}
        />
        <Input
          type='text'
          placeholder='„Çø„Çπ„ÇØÂÜÖ„Çí„Ç≠„Éº„ÉØ„Éº„ÉâÊ§úÁ¥¢'
          focusBorderColor='gray.200'
          borderRadius='md'
          boxShadow='md'
          py='8px'
          fontSize='14px'
          _placeholder={{ color: 'gray.400' }}
        />
      </InputGroup>
      <Flex direction='column'>
        <Flex
          w='100%'
          bg='white'
          borderTopRadius='md'
          boxShadow='md'
          direction='column'
          p='24px 24px 0'
          overflowX='scroll'
        >
          <TabItems mb='0px'>
            <TabItem
              title='„Çø„Çπ„ÇØ'
              onClick={() => toggleNotification(0)}
              tabState={notificationIndex}
              tabIndex={0}
              dataLength={2}
            />
            <TabItem
              title='„ÅäÁü•„Çâ„Åõ'
              onClick={() => toggleNotification(1)}
              tabState={notificationIndex}
              tabIndex={1}
              dataLength={2}
            />
          </TabItems>
          <Flex w='100%' h='1px' bg='gray.200' />
        </Flex>
        <Flex
          direction='column'
          h='100%'
          bg='white'
          px='24px'
          borderBottomRadius='md'
          boxShadow='md'
        >
          <Flex direction='column' w='100%'>
            {notificationIndex === 0 && (
              <>
                {taskList?.map((list) => (
                  <Flex
                    key={list.id}
                    direction='column'
                    color='black'
                    py='16px'
                    fontSize='14px'
                    borderBottom='1px solid #000'
                    borderColor='gray.200'
                  >
                    <Text
                      mb='2px'
                      color='gray.400'
                      fontSize='12px'
                      fontWeight='bold'
                    >
                      {list.createdAt}
                    </Text>
                    <Flex fontWeight='bold' mb={list.status && '6px'}>
                      {list.status && (
                        <Flex>
                          <Text
                            onClick={() =>
                              router.push(`/projects/${list.projectId}`)
                            }
                            cursor='pointer'
                            color='blue.800'
                          >{`„Äå${list.title}„Äç`}</Text>
                          <Text>„ÅÆ</Text>
                        </Flex>
                      )}
                      <Text>{list.content}</Text>
                    </Flex>
                    {list.status && (
                      <Text
                        cursor='pointer'
                        fontSize='12px'
                        fontWeight='bold'
                        bgGradient='linear(to-b, #7CAAFF, #8D85F4)'
                        bgClip='text'
                      >{`${linkText(list.status)} >`}</Text>
                    )}
                  </Flex>
                ))}
              </>
            )}
            {notificationIndex === 1 && (
              <>
                {notificationList?.map((list) => (
                  <Flex
                    key={list.id}
                    direction='column'
                    color='black'
                    py='16px'
                    fontSize='14px'
                    borderBottom='1px solid #000'
                    borderColor='gray.200'
                  >
                    <Text
                      mb='2px'
                      color='gray.400'
                      fontSize='12px'
                      fontWeight='bold'
                    >
                      {list.createdAt}
                    </Text>
                    <Flex fontWeight='bold' mb={list.status && '6px'}>
                      <Text>{list.content}</Text>
                    </Flex>
                  </Flex>
                ))}
              </>
            )}
          </Flex>
        </Flex>
      </Flex>
    </Flex>
  )
}

export default Notification
